/**
 * Merge k sorted linked lists and return it as one sorted list. Analyze and
 * describe its complexity.
 * 
 * Tags: Divide and Conquer, Linkedlist, Heap
 */


 public class Solution {





    public ListNode mergeKLists(List<ListNode> lists) {
        if (lists == null || lists.size() == 0) {
        	return null;
        }
        Queue<ListNode> queue = new PriorityQueue<ListNode>(lists.size(), comparatroList);
        for (int i = 0; i < lists.size(); i++) {
        	if (lists.get(i) != null) {
        		queue.add(lists.get(i));
        	}
        }
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        while (!queue.isEmpty()) {
        	ListNode head = queue.poll();
        	tail.next = head;
        	tail = head;
        	if (head.next != null) {
        		queue.add(head.next);
        	}
        }
        return dummy.next;
    }
    private Comparator<ListNode> comparatroList = new Comparator<ListNode>() {
    	public int compare(ListNode left, ListNode right) {
    		if (left == null) {
    			return 1;
    		} else if (right == null) {
    			return -1;
    		}
    		return left.val - right.val;
    	}
    };

}