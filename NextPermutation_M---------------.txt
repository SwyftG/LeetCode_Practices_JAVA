/**
 * Implement next permutation, which rearranges numbers into the
 * lexicographically next greater permutation of numbers.
 * 
 * If such arrangement is not possible, it must rearrange it as the lowest
 * possible order (ie, sorted in ascending order).
 * 
 * The replacement must be in-place, do not allocate extra memory.
 * 
 * Here are some examples. Inputs are in the left-hand column and its
 * corresponding outputs are in the right-hand column.
 * 1,2,3 → 1,3,2
 * 3,2,1 → 1,2,3
 * 1,1,5 → 1,5,1
 * 
 * Tags: Array
 */

 public class Solution {
 	public static void main(String[] args) {

 	}

 	/**
     * O(n) Time
     * Move pointer to second last element of ascending order 
     * From that index, find the farthest element that is bigger
     * Swap these two elements
     * Reverse the order from the next index
     * 6 8 7 4 3 2
     * *   *
     * 7 8 6 4 3 2
     * REVERSE
     * 7 2 3 4 6 8
     */
    public void nextPermutation(int[] num) {
 		if (num == null || num.length == 0) {
 			return;
 		}       
 		int len = num.length;
 		for (int i = len - 2; i >= 0; i--) {
 			if (num[i] < num[i + 1]) {
 				int j;
 				for (j = len - 1; j > i; j--) {
 					if (num[j] > num[i]) {
 						break;
 					}
 				}
 				swap (num, i, j);
 				reverse (num, i + 1, len - 1);
 				return;
 			}
 		}
 		reverse (num, 0, len - 1);
    }
    public void swap(int[] num, int i, int j) {
    	int tmp = num[i];
    	num[i] = num[j];
    	num[j] = tmp;
    }
    public void reverse(int[] num, int start, int end) {
    	for (int i = start, j = end; i < j; i++, j--) {
    		swap(num, i, j);
    	}
    }
}