/**
 * Given a string containing just the characters '(' and ')'
 * find the length of the longest valid (well-formed) parentheses substring.
 * 
 * For "(()", the longest valid parentheses substring is "()", which has length  * = 2.
 * Another example is ")()())", where the longest valid parentheses substring
 * is "()()", which has length = 4.
 * 
 * Follow up:
 * 
 * What if there are curly bracs and brakets as well? {} []?
 * 
 * Tags: DP, String
 */



public class Solution {
 	public static void main(String[] args) {
        System.out.println(longestValidParentheses("(()")); // 2
        System.out.println(longestValidParentheses("()(()")); // 2
        System.out.println(longestValidParentheses("()(()(")); // 2
        System.out.println(longestValidParentheses("()(()((")); // 2
        System.out.println(longestValidParentheses("()(()(((")); // 2
        System.out.println(longestValidParentheses("(((((()")); // 2
        System.out.println(longestValidParentheses(")()())")); // 4
        System.out.println(longestValidParentheses("((((((")); // 0
        System.out.println(longestValidParentheses("))))))")); // 0
        System.out.println(longestValidParentheses(")()(())")); // 6
        System.out.println(longestValidParentheses("(())()")); // 6
        System.out.println(longestValidParentheses(")()()")); // 4
    }




  	/**
     * Optimized DP
     * Build a stack for indices of open parentheses
     * Traverse the string, if current is open paren, push to stack
     * Otherwise, its close paren. 
     * If stack is empty, no open paren left, reset len to 0.
     * If not, pop the index from stack, matchedLen = current index - index of 
     * pop open paren + 1
     */
    public int longestValidParentheses(String s) {
 		if (s == null || s.length() == 0) {
 			return 0;
 		}       
 		int maxLen = 0;
 		int accumulate = 0;
 		Stack<Integer> stack = new Stack<Integer>();
 		for (int i = 0; i < s.length(); i++) {
 			if (s.charAt(i) == '(') {
 				stack.push(i);
 			} else {
 				if (stack.isEmpty()) {
 					accumulate = 0;
 				} else {
 					int matchPos = stack.pop();
 					int matchLen = i - matchPos + 1;
 					if (stack.isEmpty()) {
 						accumulate = accumulate + matchLen;
 						matchLen = accumulate;
 					} else {
 						matchLen = i - stack.peek();
 					}
 					maxLen = Math.max(maxLen, matchLen);
 				}
 			}
 		}
 		return maxLen;
    }
}